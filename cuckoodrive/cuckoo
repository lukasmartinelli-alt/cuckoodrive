#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
CuckooDrive emulates a user filesystem that aggregates all the free space provided on various
cloud storage providers into one big drive.

Usage:
  cuckoo init
  cuckoo remote add <name> <filesystem>
  cuckoo remote remove <name>
  cuckoo sync [-v | --verbose]
  cuckoo mount [--fuse | --dokan] [-v | --verbose]
  cuckoo status
  cuckoo (-h | --help)
  cuckoo --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  --fuse        Mount the filesystem using FUSE.
  --dokan       Mount the filesystem using DOKAN
  -v --verbose  Print all filesystem actions to stdout

Example #1:
  # Initialize the current directory as a cuckoo drive
  cuckoo init

  # Add dropbox as a remote filesystem
  cuckoo remote add dropbox dropbox://morgenkaffee/cuckoo

  # Synchronize the cuckoo drive with the remote filesystems
  cuckoo sync

Example #2:
  # Initialize a directory as a cuckoo drive
  cuckoo init

  #Add googledrive as remote filesystem
  cuckoo remote add googledrive gdrive://morgenkaffee/cuckoo

  #Add box.net as remote filesystem
  cuckoo remote add boxdotnet boxnet://morgenkaffee/cuckoo

  # Mount the cuckoodrive directly
  cuckoo mount

  # Upload a backup to cuckoodrive
  cp /path/to/backup.tar .
"""
from __future__ import print_function, division, absolute_import, unicode_literals
import sys
import shutil

from docopt import docopt

from fs.osfs import OSFS
from fs.expose import fuse
from fs.wrapfs.limitsizefs import LimitSizeFS
from fs.wrapfs.debugfs import DebugFS
from fs.path import basename

from cuckoodrive.multifs import WritableMultiFS
from cuckoodrive.partedfs import PartedFS
from cuckoodrive.utils import mb


def init(path):
    """
    Initialize a new cuckoo drive in the current folder.
    This will create a .cuckoo.yml file where the configuration is stored.
    """
    pass


def sync(path):
    """
    Synchronizes the current cuckoo drive directly with the remote filesystems.
    """
    pass


def mount(path):
    """
    Mount the remote filesystems as a FUSE or Dokan filesystem.
    This allows you to use cuckoo drive exactly for your purposes.
    """
    pass


def add_remote(path, name, filesystem):
    """
    Add a remote filesystem to the configuration file after successful authentication.
    """
    pass


def remove_remote(path, name):
    """
    Remove the remote filesystem
    """
    pass


def status(path):
    """
    Print the status of the chosen cuckoo drive.
    """
    pass


def mount_devel(path, sources):
    """
    Mount the given source filesystems with OSFS and limit them to 20MB.
    All output of the filesystems is logged to output.
    To aggregate the mounted source filesystems a combination of PartedFS and MultiFS
    is mounted at the specified path.
    """
    skip_methods = ('listdir', 'listdirinfo', 'getinfo', 'exists', 'isfile', 'getsize')
    multifs = WritableMultiFS()

    for source_path in sources:
        fs = DebugFS(LimitSizeFS(OSFS(source_path), mb(20)),
                     identifier="OSFS@" + basename(source_path),
                     skip=skip_methods, verbose=False)
        multifs.addfs(source_path, fs)

    debug_multifs = DebugFS(multifs, identifier="MultiFS@" + basename(path),
                            skip=skip_methods, verbose=False)
    partedfs = PartedFS(debug_multifs, mb(2))
    debugfs = DebugFS(partedfs, identifier="PartedFS@" + basename(path),
                      skip=skip_methods, verbose=False)

    try:
        mp = fuse.mount(debugfs, path)
        print("Mounted devel at " + mp.path)
        print("Press any key to unmount")
        raw_input()
        print("Unmounting devel")
        mp.unmount()
    except RuntimeError:
        print("Failed mounting devel")
        raise


def mount_fuse(path):
    """Try to mount the CuckooDrive with FUSE at the specified path"""
    if not shutil.which("fusermount"):
        print("Fuse could not be found in path.")
        print("Please install fuse to mount with CuckooDrive")
        sys.exit()

    print("Mounting with FUSE at " + path)


def mount_dokan(path):
    """Try to mount the CuckooDrive with Dokan at the specified path"""
    print("Mounting with Dokan is not supported yet")
    sys.exit()


def main(arguments):
    print(arguments)

    if arguments["mount"]:
        path = arguments["<path>"]
        if sys.platform.startswith("linux"):
            mount_fuse(path)
        if sys.platform.startswith('win'):
            print("Mounting with Dokan")
            mount_dokan(path)

    if arguments["develmount"]:
        path = arguments["<path>"]
        sources = arguments["<source>"]
        mount_devel(path, sources)

if __name__ == "__main__":
    arguments = docopt(__doc__, version="CuckooDrive 0.0.1")
    main(arguments)
