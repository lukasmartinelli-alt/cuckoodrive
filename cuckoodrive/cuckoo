#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
CuckooDrive emulates a user filesystem that aggregates all the free space provided on various
cloud storage providers into one big drive.

Usage:
  cuckoo (sync | mount [--fuse | --dokan]) [-v | --verbose] --remotes <fs_uri>...
  cuckoo (-h | --help)
  cuckoo --version

Options:
  -h --help     Show this screen.
  --remotes     Filesystem URIs of remote filesystems
  --version     Show version.
  --fuse        Mount the filesystem using FUSE.
  --dokan       Mount the filesystem using DOKAN
  -v --verbose  Print all filesystem actions to stdout

Example #1:
  cuckoo sync --remotes dropbox://morgenkaffee  googledrive://morgenkaffe

Example #2:
  cuckoo mount --fuse --remotes googledrive://morgenkaffee
"""
from __future__ import print_function, division, absolute_import, unicode_literals
import os
import sys

from docopt import docopt

from fs.expose import fuse
from fs.opener import fsopendir
from fs.wrapfs.debugfs import DebugFS

from cuckoodrive.multifs import WritableMultiFS
from cuckoodrive.partedfs import PartedFS
from cuckoodrive.utils import mb


class CuckooDrive(object):
    """Represents a cuckoo drive either in mounted or in synchronized mode."""
    skip_methods = ('listdir', 'listdirinfo', 'getinfo', 'exists', 'isfile', 'getsize')
    file_size = mb(10)

    def __init__(self, path, remotes, verbose=False):
        self.path = path
        self.remotes = remotes
        self.verbose = verbose


class MountedCuckooDrive(CuckooDrive):
    def __init__(self, path, remotes, **kwargs):
        super(MountedCuckooDrive, self).__init__(path, remotes, **kwargs)
        self.mount()

    def mount(self):
        """
        Mount the remote filesystems as a FUSE or Dokan filesystem.
        This allows you to use cuckoo drive exactly for your purposes.
        """
        def verbose_fs(wrapped_fs, identifier):
            if self.verbose:
                return DebugFS(wrapped_fs, identifier=identifier,
                               skip=self.skip_methods, verbose=False)
            return wrapped_fs

        multifs = verbose_fs(WritableMultiFS(), "MultiFS")

        for fs_uri in self.remotes:
            print(fs_uri)
            remote_fs = verbose_fs(fsopendir(fs_uri), "Remote@{0}".format(fs_uri))
            multifs.addfs(fs_uri, remote_fs)

        partedfs = verbose_fs(PartedFS(multifs, self.file_size), "PartedFS")

        try:
            mp = fuse.mount(partedfs, self.path)
            print("Mounted cuckoo drive at " + mp.path)
            print("Press any key to unmount")
            raw_input()
            print("Unmounting cuckoo drive")
            mp.unmount()
        except RuntimeError:
            print("Failed mounting cuckoo drive")
            raise


class SyncedCuckooDrive(CuckooDrive):

    def sync(self):
        """
        Synchronizes the current cuckoo drive directly with the remote filesystems.
        """
        pass


def main(arguments):
    print(arguments)
    path = os.getcwd()
    verbose = arguments["--verbose"]
    remotes = arguments["<fs_uri>"]

    if arguments["mount"]:
        MountedCuckooDrive(path, remotes, verbose=verbose)

    if arguments["sync"]:
        SyncedCuckooDrive(path, remotes, verbose=verbose)


if __name__ == "__main__":
    arguments = docopt(__doc__, version="CuckooDrive 0.0.1")
    main(arguments)
